abstract class Robber {
    abstract void RowHouses(int[] money);
    abstract void RoundHouses(int[] money);
    abstract void SquareHouse(int[] money);
    abstract void MultiHouseBuilding(int[] money1, int[] money2, int[] money3, int[] money4);
    
    // Default method
    void MachineLearning() {
        System.out.println("I love MachineLearning.");
    }
    
    void RobbingClass() {
        System.out.println("MScAI&ML");
    }
}

class JAVAProfessionalRobber extends Robber {

    @Override
    void RowHouses(int[] money) {
        int n = money.length;
        if (n == 0) {
            System.out.println("0");
            return;
        }
        if (n == 1) {
            System.out.println(money[0]);
            return;
        }
        int[] dp = new int[n];
        dp[0] = money[0];
        dp[1] = Math.max(money[0], money[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + money[i]);
        }
        System.out.println(dp[n - 1]);
    }

    @Override
    void RoundHouses(int[] money) {
        int n = money.length;
        if (n == 0) {
            System.out.println("0");
            return;
        }
        if (n == 1) {
            System.out.println(money[0]);
            return;
        }
        if (n == 2) {
            System.out.println(Math.max(money[0], money[1]));
            return;
        }
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        dp1[0] = money[0];
        dp1[1] = Math.max(money[0], money[1]);
        for (int i = 2; i < n - 1; i++) {
            dp1[i] = Math.max(dp1[i - 1], dp1[i - 2] + money[i]);
        }
        dp2[1] = money[1];
        dp2[2] = Math.max(money[1], money[2]);
        for (int i = 3; i < n; i++) {
            dp2[i] = Math.max(dp2[i - 1], dp2[i - 2] + money[i]);
        }
        System.out.println(Math.max(dp1[n - 2], dp2[n - 1]));
    }

    @Override
    void SquareHouse(int[] money) {
        int n = money.length;
        if (n == 0) {
            System.out.println("0");
            return;
        }
        if (n == 1) {
            System.out.println(money[0]);
            return;
        }
        int[] dp = new int[n];
        dp[0] = money[0];
        dp[1] = Math.max(money[0], money[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + money[i]);
        }
        System.out.println(dp[n - 1]);
    }

    @Override
    void MultiHouseBuilding(int[] money1, int[] money2, int[] money3, int[] money4) {
        int n = money1.length;
        if (n == 0) {
            System.out.println("0");
            return;
        }
        if (n == 1) {
            System.out.println(Math.max(money1[0], Math.max(money2[0], Math.max(money3[0], money4[0])));
            return;
        }
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        int[] dp3 = new int[n];
        int[] dp4 = new int[n];
        dp1[0] = money1[0];
        dp1[1] = Math.max(money1[0], money1[1]);
        dp2[0] = money2[0];
        dp2[1] = Math.max(money2[0], money2[1]);
        dp3[0] = money3[0];
        dp3[1] = Math.max(money3[0], money3[1]);
        dp4[0] = money4[0];
        dp4[1] = Math.max(money4[0], money4[1]);
        for (int i = 2; i < n; i++) {
            dp1[i] = Math.max(dp1[i -   

